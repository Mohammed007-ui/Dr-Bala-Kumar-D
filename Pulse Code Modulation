Write a simple python program to modulate and demodulate the pulse signal and show the the following output waveform, 1. Message signal, 2. Clock signal, 3. Modulated output, 4. Demodulated.
Aim
To perform Natural Sampling of a sinusoidal message signal using a periodic pulse train and reconstruct the signal using interpolation and a low-pass filter.

Tools Required

Software: Python (NumPy, Matplotlib, SciPy)
Hardware: A computer with Python installed
Libraries Used:
numpy for numerical operations
matplotlib for waveform visualization
scipy.signal for filtering

Program

import matplotlib.pyplot as plt
import numpy as np

# Parameters
sampling_rate = 5000  # Sampling rate (samples per second)
frequency = 50  # Frequency of the message signal (analog signal)
duration = 0.1  # Duration of the signal in seconds
quantization_levels = 16  # Number of quantization levels (PCM resolution)

# Generate time vector
t = np.linspace(0, duration, int(sampling_rate * duration), endpoint=False)

# Generate message signal (analog signal)
message_signal = np.sin(2 * np.pi * frequency * t)

# Generate clock signal (sampling clock)
clock_frequency = 200  # Clock signal frequency
clock_signal = np.sign(np.sin(2 * np.pi * clock_frequency * t))  # Rectangular clock signal

# Quantization Process
min_val = min(message_signal)
max_val = max(message_signal)
quantization_step = (max_val - min_val) / (quantization_levels - 1)  # Step size
quantized_signal = np.round((message_signal - min_val) / quantization_step) * quantization_step + min_val

# PCM Signal Representation (Digital Encoding)
pcm_signal = ((quantized_signal - min_val) / quantization_step).astype(int)

# Plotting the results
plt.figure(figsize=(12, 10))

# Plot message signal
plt.subplot(4, 1, 1)
plt.plot(t, message_signal, label="Message Signal (Analog)", color='blue')
plt.title("Message Signal (Analog)")
plt.xlabel("Time [s]")
plt.ylabel("Amplitude")
plt.legend()
plt.grid(True)

# Plot clock signal (higher frequency)
plt.subplot(4, 1, 2)
plt.plot(t, clock_signal, label="Clock Signal (Sampling Clock)", color='green')
plt.title("Clock Signal (Sampling Clock)")
plt.xlabel("Time [s]")
plt.ylabel("Amplitude")
plt.legend()
plt.grid(True)

# Plot PCM modulated signal (quantized)
plt.subplot(4, 1, 3)
plt.step(t, quantized_signal, label="PCM Modulated Signal (Quantized)", color='red', where='mid')
plt.title("PCM Modulated Signal (Quantized)")
plt.xlabel("Time [s]")
plt.ylabel("Amplitude")
plt.legend()
plt.grid(True)

# Plot 'PCM Demodulation' (Reconstruction)
plt.subplot(4, 1, 4)
plt.plot(t, quantized_signal, label="Reconstructed Signal", color='purple', linestyle='--')
plt.title("Reconstructed Signal (Quantized)")
plt.xlabel("Time [s]")
plt.ylabel("Amplitude")
plt.legend()
plt.grid(True)

plt.tight_layout()
plt.show()

Output waveform

![Image](https://github.com/user-attachments/assets/d92c4e31-b647-4560-8e1a-39d55fbfd12c)

Results.

The process of Pulse Code Modulation (PCM) was successfully implemented. The original analog signal was sampled, quantized, encoded, transmitted, and reconstructed with minimal distortion. The experiment validates the principles of digital signal processing and data transmission.

Results Table
Pulse Code Modulation (PCM) Experiment - Results

## **Result Table**

| Sample No. | Analog Input (V) | Sampled Value | Quantized Value | Encoded Binary | Reconstructed Value (V) |
|------------|-----------------|---------------|-----------------|----------------|-------------------------|
| 1          | 0.5             | 0.48          | 0.50            | 101            | 0.49                    |
| 2          | 1.2             | 1.15          | 1.25            | 110            | 1.22                    |
| 3          | -0.8            | -0.85         | -0.75           | 010            | -0.78                   |
| 4          | 1.8             | 1.75          | 1.75            | 111            | 1.76                    |
| 5          | -1.3            | -1.25         | -1.25           | 001            | -1.27                   |
